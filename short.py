import heapq
class Distance: # Dijkstra法を実行し最短経路を計算する
    def __init__(self,g):
        lines = g.split("\n")
        self.size = int(lines[0]) 
        self.list = [[] for i in range(self.size+1)]
        self.name = [] # 駅名を格納するリスト
        for s in lines[1:]: # データ格納
            d1,d2,l,s = s.split(" ")
            if not d1 in self.name: # 駅名未登録の場合はリストに登録
                self.name.append(d1)
            if not d2 in self.name: # 駅名未登録の場合はリストに登録
                self.name.append(d2)
            d1 = self.name.index(d1) # 駅名を数字へ変換
            d2 = self.name.index(d2) # 駅名を数字へ変換
            self.connect(d1,d2,l,s)
    def connect(self,x,y,l,s): # 無向
        self.connect1(x,y,l,s)
        self.connect1(y,x,l,s)
    def connect1(self,x,y,l,s):
        x = int(x)
        y = int(y)
        l = float(l)
        self.list[x].append([y,l,s]) # 接続先の駅、距離、路線名を格納
    def trav(self,s): # sから各駅への最短経路探索
        d = [float('inf') for i in range(self.size)]
        d[s] = 0
        fmap = [None for i in range(self.size)]
        line = [None for i in range(self.size)]
        pq = [] # 優先度付き待ち行列
        u = s   # sから始める
        while True:
            for n in self.list[u]: # 隣には (駅番号,距離,路線名) が登録されている
                v,weight,name = n # vが駅番号、weightが距離、nameが路線名
                if d[v] > d[u] + weight: # uからvに行った方が重みが少なければ、                                
                    d[v] = round(d[u] + weight,1) # 距離を更新し、
                    heapq.heappush(pq,[d[v],v,name]) # (距離,駅番号,路線名)を優先度付き待ち行列に登録。距離が小さい順に出てくる
                    fmap[v] = u # 直前の駅を登録
                    line[v] = name # 直前の路線を登録
            if len(pq) == 0: # 空になったらwhileから抜ける
                break
            weight,u,name = heapq.heappop(pq) # (距離,駅番号,路線名)を取り出す。
        return [d,fmap,line] # 距離と直前と路線名を返す。
    def travel(self,s,t): # sからtまでの経路検索
        print("経路:",s,"→",t)
        s = self.name.index(s)
        t = self.name.index(t)
        d,fmap,line = self.trav(s) # sから各駅への最短経路情報
        print("距離:",d[t],"km")
        self.trace(s,t,fmap,line) # 経路を表示
    def trace(self,s,t,fmap,line,ans=""): # 再帰し遡って経路を表示する
        if s == t: # 出発駅まで遡ったら
            ans = self.name[s] + ans
            print(ans) # 表示
        else: # 出発駅まで遡っていないなら
            ans = "→(" + line[t] + ")→" + self.name[t] + ans # 文字列の前に路線名と駅名を挿入
            self.trace(s,fmap[t],fmap,line,ans) # 遡る
    def distance(self,s,l1,l2): # sからの距離がl1km以上l2km以下の駅を挙げる
        s = self.name.index(s)
        d,fmap,line = self.trav(s)
        list = []
        for i in range(len(d)): # 全駅の経路情報の中から距離がl1以上l2以下のデータをリストに追加
            if l1 <= d[i] <= l2:
                list.append([d[i],self.name[i]])
        list.sort() # ソート
        print(self.name[s],"からの距離が",l1,"km以上",l2,"km以下の駅")
        for i in range(len(list)): # 表示
            print(list[i][1],list[i][0],"km")
def test():
    graph = '''91
東京 神田 1.3 東北本線
神田 秋葉原 0.7 東北本線
秋葉原 上野 1.6 東北本線
上野 日暮里 2.2 東北本線
日暮里 田端 1.3 東北本線
田端 池袋 5.2 山手線
池袋 新宿 4.8 山手線
新宿 代々木 0.7 山手線
代々木 品川 7.9 山手線
品川 東京 8.8 東海道本線
東京 錦糸町 4.8 総武本線
神田 御茶ノ水 1.3 中央本線
秋葉原 錦糸町 3.4 総武本線支線
秋葉原 御茶ノ水 0.9 総武本線支線
御茶ノ水 代々木 7.0 中央本線
西船橋 錦糸町 15.8 総武本線
千葉 西船橋 18.6 総武本線
市川塩浜 西船橋 5.9 武蔵野線
南船橋 西船橋 5.4 武蔵野線
佐倉 千葉 16.1 総武本線
蘇我 千葉 3.8 外房線
成東 佐倉 21.6 総武本線
成田 佐倉 13.1 成田線
大網 成東 13.8 東金線
成田 成田空港 10.8 成田線空港支線
東京 市川塩浜 18.2 京葉線
市川塩浜 南船橋 7.8 京葉線
南船橋 蘇我 17.0 京葉線
蘇我 大網 19.1 外房線
蘇我 木更津 31.3 内房線
木更津 上総亀山 32.2 久留里線
木更津 安房鴨川 88.1 内房線
安房鴨川 大網 89.5 外房線
成東 松岸 40.4 総武本線
松岸 銚子 3.2 総武本線
松岸 香取 31.8 成田線
香取 鹿島サッカースタジアム 17.4 鹿島線
香取 成田 30.5 成田線
日暮里 新松戸 22.9 常磐線
西船橋 新松戸 14.3 武蔵野線
成田 我孫子 32.9 成田線我孫子支線
新松戸 我孫子 10.6 常磐線
我孫子 友部 67.5 常磐線
友部 水戸 16.5 常磐線
水戸 いわき 94.1 常磐線
水戸 上菅谷 10.1 水郡線
上菅谷 常陸太田 9.5 水郡線常陸太田支線
上菅谷 常陸大子 45.5 水郡線
田端 赤羽 6.1 東北本線
池袋 赤羽 5.5 赤羽線(埼京線)
日暮里 尾久 2.6 東北本線支線(尾久経由)
赤羽 尾久 5.0 東北本線支線(尾久経由)
赤羽 南浦和 9.3 東北本線
赤羽 武蔵浦和 10.6 東北本線(武蔵浦和経由・埼京線)
南浦和 大宮 7.8 東北本線
武蔵浦和 大宮 7.4 東北本線(武蔵浦和経由・埼京線)
新松戸 南浦和 25.8 武蔵野線
南浦和 武蔵浦和 1.9 武蔵野線
大宮 小山 50.3 東北本線
小山 友部 50.2 水戸線
小山 宇都宮 28.9 東北本線
宇都宮 宝積寺 11.7 東北本線
宇都宮 日光 40.5 日光線
宝積寺 黒磯 42.1 東北本線
宝積寺 烏山 20.4 烏山線
大宮 熊谷 34.4 高崎線
熊谷 倉賀野 35.9 高崎線
倉賀野 高崎 4.4 高崎線
高崎 新前橋 7.3 上越線
高崎 横川 29.7 信越本線
新前橋 小山 84.4 両毛線
新前橋 渋川 13.8 上越線
渋川 水上 38.0 上越線
渋川 大前 55.3 吾妻線
大宮 高麗川 30.6 川越線
倉賀野 高麗川 60.9 八高線
高麗川 拝島 21.2 八高線
新宿 西国分寺 22.5 中央本線
武蔵浦和 西国分寺 25.9 武蔵野線
西国分寺 立川 4.7 中央本線
立川 八王子 9.9 中央本線
立川 拝島 6.9 青梅線
八王子 拝島 9.9 八高線
八王子 韮崎 99.6 中央本線
韮崎 小淵沢 26.7 中央本線
小淵沢 岡谷 36.7 中央本線
小淵沢 野辺山 23.4 小海線
岡谷 塩尻 11.7 中央本線
岡谷 辰野 9.5 中央本線辰野支線
塩尻 松本 13.3 篠ノ井線
塩尻 辰野 18.2 中央本線辰野支線
拝島 奥多摩 30.3 青梅線
拝島 武蔵五日市 11.1 五日市線
西国分寺 府中本町 3.9 武蔵野線
立川 府中本町 7.6 南武線
品川 武蔵小杉 10.0 東海道本線支線(品鶴線)
府中本町 武蔵小杉 20.4 南武線
鶴見 武蔵小杉 7.8 東海道本線支線(品鶴線)
武蔵小杉 尻手 5.8 南武線
品川 川崎 11.4 東海道本線
川崎 尻手 1.7 南武線
川崎 鶴見 3.5 東海道本線
鶴見 東神奈川 5.3 東海道本線
東神奈川 横浜 1.8 東海道本線
横浜 大船 17.7 東海道本線
大船 茅ヶ崎 12.1 東海道本線
茅ヶ崎 熱海 46.0 東海道本線
尻手 浜川崎 4.1 南武線支線
鶴見 浅野 3.0 鶴見線
浅野 武蔵白石 1.1 鶴見線
武蔵白石 浜川崎 2.2 鶴見線
浜川崎 扇町 1.3 鶴見線
浅野 海芝浦 1.7 鶴見線海芝浦支線
武蔵白石 大川 1.0 鶴見線大川支線
東神奈川 新横浜 6.1 横浜線
新横浜 橋本 27.7 横浜線
八王子 橋本 8.8 横浜線
橋本 茅ヶ崎 33.3 相模線
横浜 磯子 9.5 根岸線
磯子 大船 12.6 根岸線
大船 久里浜 23.9 横須賀線
熱海 伊東 16.9 伊東線'''
    g = Distance(graph)
    g.travel("東京","久里浜")
    print()
    g.distance("新宿",50,100)
test()
